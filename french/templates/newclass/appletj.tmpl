$PKGLINE
        import java.awt.*;
import javax.swing.*;

/**
 * Classe $CLASSNAME - d\u00e9crivez la classe ici
 *
 * @author:  (votre nom)
 * @version: (un num\u00e9ro de version ou une date)
 */
public class $CLASSNAME extends JApplet
{
    // variable d'instance - remplacez cet exemple par le v\u00f4tre
    private int x;

    /**
     * Appel\u00e9e par le navigateur ou le visualiseur afin de signaler \u00e0 l'Applet
     * qu'il est maintenant pris en charge par le syst\u00e8me.
     * Il est garanti que ceci pr\u00e9c\u00e9dera le premier appel de la m\u00e9thode start.
     */
    public void init()
    {
        // Il y a un conflit de s\u00e9curit\u00e9 avec les navigateurs courants (incluant
        // Netscape & Internet Explorer) qui interdisent l'acc\u00e8s \u00e0 la queue
        // d'\u00e9v\u00e9nements d'AWT -- ce dont les JApplets ont besoin au d\u00e9marrage.
        JRootPane rootPane = this.getRootPane();
        rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);

        // autre initialisation n\u00e9cessaire pour votre JApplet

    }

    /**
     * Appel\u00e9e par le navigateur ou le visualiseur pour signaler \u00e0 l'Applet
     * qu'il devrait commencer \u00e0 s'ex\u00e9cuter.  Ceci se produit apr\u00e8s l'appel
     * de init et chaque fois que la page Web est actualis\u00e9e.
     */
    public void start()
    {
        // Ins\u00e9rez ici le code qui doit s'ex\u00e9cuter chaque fois
        // que la page Web est actualis\u00e9e.

    }

    /**
     * Appel\u00e9e par le navigateur ou le visualiseur afin de signaler \u00e0 l'Applet
     * qu'il doit arr\u00eater de s'ex\u00e9cuter. Ceci se produit lorsque la page
     * Web qui contient l'Applet est remplac\u00e9e par une autre, ou encore
     * juste avant que l'Applet ne soit d\u00e9truit. Si vous n'avez pas de
     * ressources \u00e0 lib\u00e9rer (comme des fils d'ex\u00e9cution \u00e0 stopper),
     * vous pouvez supprimer cette m\u00e9thode.
     */
    public void stop()
    {
        // Ins\u00e9rez le code \u00e0 ex\u00e9cuter lorsque l'Applet est arr\u00eat\u00e9
    }

    /**
     * M\u00e9thode Paint de l'applet.
     *
     * @param  g   l'objet Graphics de cet applet
     */
    public void paint(Graphics g)
    {
        // texte affich\u00e9 par l'applet
        g.setColor(Color.white);
        g.fillRect(0, 0, 200, 100);
        g.setColor(Color.black);
        g.drawString("JApplet mod\u00e8le", 20, 20);
        g.setColor(Color.blue);
        g.drawString("created by BlueJ", 20, 40);
    }

    /**
     * Appel\u00e9e par le navigateur ou le visualiseur afin de signaler \u00e0 l'Applet
     * qu'il est sur le point d'\u00eatre d\u00e9truit. Si vous n'avez pas de ressources
     * \u00e0 lib\u00e9rer, vous pouvez supprimer cette m\u00e9thode.
     */
    public void destroy()
    {
        // Ins\u00e9rez le code \u00e0 ex\u00e9cuter lorsque l'Applet est d\u00e9truit.
    }


    /**
     * Retourne quelques renseignements \u00e0 propos de cet applet.
     * Un applet devrait remplacer cette m\u00e9thode afin de retourner un String
     * d\u00e9crivant l'auteur, la version et les droits d'auteur.
     *
     * @return une String d\u00e9crivant l'Applet
     */
    public String getAppletInfo()
    {
        // Retournez les informations que vous souhaitez
        return "Titre : Applet d\u00e9mo BlueJ\n" +
                "Auteur : Bruce Quig\n" +
                "Une description d'applet typique.";
    }


    /**
     * Retourne quelques renseignements \u00e0 propos des param\u00e8tres accept\u00e9s
     * par l'Applet. Vous devriez retourner un tableau de Strings d\u00e9crivant
     * chaque param\u00e8tre s\u00e9par\u00e9ment (premier indice).
     * Le second indice du tableau correspond aux nom, type et description
     * de chaque param\u00e8tre.
     *
     * @return  un String[][] d\u00e9crivant l'Applet
     */
    public String[][] getParameterInfo()
    {
        // D\u00e9crivez vos param\u00e8tres ici
        String paramInfo[][] = {
                {"firstParameter",  "1-10",    "description du premier param\u00e8tre"},
                {"secondParameter", "boolean", "description du second param\u00e8tre"}
                {"images",          "url",     "description du troisi\u00e8me param\u00e8tre"}
        };
        return paramInfo;
    }
}
